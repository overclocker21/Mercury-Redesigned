<!-- About -->
<div id="blog" class="section md-padding">

    <!-- Container -->
    <div class="container">

        <!-- Row -->
        <div class="row">

            <!-- Section header -->
            <div class="section-header text-center">
                <h2 class="title">Blogging in IT world</h2>
            </div>
            <!-- /Section header -->

            <!-- about -->
            <div class="col-md-12">
                <div class="blog">
                    <i class="fa fa-book" style="display: flex; justify-content: center;"></i>
                    <h3>Social Engineering</h3>
                    <h6>September 4, 2018</h6>

                    <img class="img-responsive" src="./img/team_awareness.jpg" alt="" style="position: relative; margin: auto">

                </div>
            </div>
            <!-- /about -->

            <!-- about -->
            <div class="col-md-12">
                <div class="blog">
                    <i class="fa fa-book" style="display: flex; justify-content: center;"></i>
                    <h3>Items to include on your Incident Response Plan</h3>
                    <h6>September 2, 2018</h6>

                    <img class="img-responsive" src="./img/incident_plan.jpg" alt="" style="position: relative; margin: auto">

                </div>
            </div>
            <!-- /about -->


            <!-- about -->
            <div class="col-md-12">
                <div class="blog">
                    <i class="fa fa-book" style="display: flex; justify-content: center;"></i>
                    <h3>Code Review Best Practices</h3>
                    <h6>August 11, 2018</h6>

                    <div>
                        <p>Due to the integration with popular versioning tools, code reviews had become very
                            popular. They
                            are absolutely a MUST and should integrate with a team’s existing processes. It not
                            only
                            improves your code quality and helps escape major defects but it also helps developers
                            be
                            more familiar with all aspects of the application. Here is the list of DO’s and DONT’s
                            in
                            the code reviewing process:
                        </p>

                        <table style="width:100%">
                            <tr>
                                <th style="text-align: center; width: 50%;">DOs</th>
                                <th style="text-align: center; width: 50%">DONTs</th>
                            </tr>
                            <tr>
                                <td>Have at least two reviewers</td>
                                <td>Do not leave the destiny of the code to just one person. In case that person
                                    misses something
                                    there is a good chance another person will catch it</td>
                            </tr>
                            <tr>
                                <td>Take your time to do a code review (and of course be aware that the team is
                                    waiting for
                                    you to finish it)</td>
                                <td>Do not rush, finding security and functional bugs is important and your team is
                                    relying
                                    on you to catch those</td>
                            </tr>
                            <tr>
                                <td>Make sure that code follows the right design and architectural standards</td>
                                <td>Do not be afraid or lazy to mention that the code is designed poorly and not
                                    according
                                    to standards. This is where the mess begins! </td>
                            </tr>
                            <tr>
                                <td>Make sure you express yourself clearly and correctly when communicating </td>
                                <td>Do not use slang or abbreviations, some people will not be able to understand
                                    it </td>
                            </tr>
                            <tr>
                                <td>Try to judge the code from the point of view of non-functional requirements. It
                                    is better
                                    to have a check list of things to check</td>
                                <td>Do not think that it is not your responsibility to think about other aspects of
                                    the code,
                                    except functionality </td>
                            </tr>
                            <tr>
                                <td>If you are new to the team and do not have the domain knowledge about the code,
                                    you should
                                    ask someone to help you review/explain the code </td>
                                <td>Make a thorough review every time you review the code. Do not mark it as
                                    approved if
                                    you do not fully understand it</td>
                            </tr>
                            <tr>
                                <td>Do long design reviews in person, so your team members can ask questions and
                                    get clarifications
                                    right away in the same interaction </td>
                                <td>Commenting a huge piece of code can be messy and inefficient </td>
                            </tr>
                            <tr>
                                <td>Do your own code review as well</td>
                                <td>Do not waste other people’s time. By reviewing your code yourself you can get
                                    rid of
                                    half the defects on your own
                                </td>
                            </tr>
                            <tr>
                                <td>Keep your comments short and to the point</td>
                                <td>Do not start writing an article about a better approach that you had done a
                                    year ago
                                    while cruising over the Atlantic Ocean </td>
                            </tr>
                            <tr>
                                <td>Try to take breaks between reviewing code </td>
                                <td>Do not review code for too long in one sitting. You can lose your concentration
                                    and miss
                                    defects
                                </td>
                            </tr>
                            <tr>
                                <td>Imagine how the code will work in production. Consider key user workflows and
                                    how that
                                    code will facilitate/block them</td>
                                <td>Do not just blindly click Approve button; think wider </td>
                            </tr>
                            <tr>
                                <td>Pay as much attention to the follow up review as to the original one</td>
                                <td>Do not think that all your comments will be addressed. Make sure to check fixes
                                    thoroughly
                                </td>
                            </tr>
                        </table>

                        <br>

                        <p>No one can write perfect bug-free code. Issues may slip past you and introduce broken
                            functionality,
                            performance degradation, security bridges, etc. That is why code reviews are crucial
                            and
                            in the end, four eyes are always better than two. </p>
                    </div>
                </div>
            </div>
            <!-- /about -->

            <!-- about -->
            <div class="col-md-12">
                <div class="blog">
                    <i class="fa fa-book" style="display: flex; justify-content: center;"></i>
                    <h3>Best software development practices</h3>
                    <h6>July 18, 2018</h6>

                    <div>
                        <ol>
                            <li>Have proper artifacts (code ,UML diagrams, test cases, design documents,
                                requirements, wiki’s)
                            </li>
                            <li>Collaboration, Peer review. Code should not go to production without being reviewed
                                by your
                                colleagues. Once you commit something send it to other dev to review</li>
                            <li>Trigger unit tests on each commit, run sanity test every hour and performance once
                                a day</li>
                            <li>Constantly improving quality:
                                <ul>
                                    <li>Bug parties: Have two people in separate rooms and give them to test one
                                        feature,
                                        and then compare results</li>
                                    <li>Product owner should sign off on QA’s test cases, since they have better
                                        understanding
                                        of user’s workflows</li>
                                    <li>Must have functional, integration and regression tests automated. These
                                        tests can
                                        also be shared with DEV team and depending on which part of the code was
                                        modified
                                        Devs can run respective test cases locally before committing</li>
                                    <li>Parallelize your tests to execute them faster</li>
                                </ul>
                            </li>
                            <li>Have design guidelines to speed up development work and stay consistent with each
                                other </li>
                            <li>Automate as much as you can</li>
                        </ol>
                    </div>
                </div>
            </div>
            <!-- /about -->

            <!-- about -->
            <div class="col-md-12">
                <div class="blog">
                    <i class="fa fa-book" style="display: flex; justify-content: center;"></i>
                    <h3>How to protect your code?</h3>
                    <h6>March 6, 2018</h6>
                    <div>
                        <ol>
                            <li>Use Static Analysis Tools:
                                <ul>
                                    <li>Sonar and Coverity - identifies critical security vulnerabilities. Easy to
                                        integrate,
                                        provides full code coverage and accurate results</li>
                                    <li>Rose Checkers – enforces the CERT C/C++ Coding Standard</li>
                                    <li>CERT Thread Safety Analysis - uses annotations to declare and enforce
                                        thread safety
                                        policies in C and C++ programs</li>
                                    <li>AIR integer model – it’s an automated mechanism for eliminating integer
                                        overflow
                                        and truncation
                                    </li>
                                    <li>Compiler-Enforced Buffer Overflow Elimination - prevents buffer overflows
                                        from succeeding
                                        in multithreaded code</li>
                                </ul>
                            </li>
                            <li>Use Dynamic Analysis Tools:
                                <ul>
                                    <li>Address Sanitizer – prevents buffer overflow and memory leaks</li>
                                    <li>Tread Sanitizer – detects data races </li>
                                    <li>Memory Sanitizer – detects uninitialized memory </li>
                                    <li>Undefined Behavior Sanitizer – detects undefined behavior</li>
                                </ul>
                            </li>
                            <li>Do Fuzz Testing using:
                                <ul>
                                    <li>OSS-Fuzz – continuous fuzzing from Google</li>
                                    <li>libFuzzer – coverage-guided fuzzing</li>
                                    <li>American Fuzzy Lop – employs genetic algorithms to create test cases </li>
                                </ul>
                            </li>
                            <li>Do Penetration Testing using:
                                <ul>
                                    <li>Metasploit - is a framework with a large programmer fan base that adds
                                        custom modules,
                                        test tools that test for weaknesses in operating systems and applications</li>
                                    <li>Nmap – used for discovering hosts and services </li>
                                    <li>Wireshark – used for network troubleshooting and analysis</li>
                                    <li>John the Ripper – used for cracking passwords </li>
                                    <li>Burp Suite – It maps and analyzes web applications, finding and exploiting
                                        vulnerabilities</li>
                                    <li>Nessus - checks computers and firewalls for open ports and for
                                        installations of potentially
                                        vulnerable software</li>
                                </ul>
                            </li>
                            <li>Write security wrappers for the third-party libraries to protect your code </li>
                            <li>Do not release your code to production without confirming what impact has a
                                particular vulnerability
                                on the system</li>
                            <li>Log security-related events and monitor them. Sanitize what you put in your logs to
                                avoid
                                noise and missing important information. It is preferred not to log sensitive data,
                                but
                                if you have to, make sure it is encrypted</li>
                            <li>Stay up to date with OWASP updates and make sure you address their top 10 most
                                critical vulnerabilities
                            </li>
                        </ol>
                    </div>
                </div>
            </div>
            <!-- /about -->
            <!-- about -->
            <div class="col-md-12">
                <div class="blog">
                    <i class="fa fa-book" style="display: flex; justify-content: center;"></i>
                    <h3>JSON Web Token (JWT)</h3>
                    <h6>February 12, 2018</h6>

                    <div>
                        <p>JWT is used for creating access tokens and passing claims between two parties. You
                            should use
                            it whenever you want to pass information from the server to the client in a secure
                            manner.
                            However, JWT is not 100% secure. Everyone still can see the information which is
                            available
                            as part of the token. JWT should be cryptographically signed to ensure that token has
                            not
                            been tampered with (JWS -RFC7515). It can be encrypted to keep sensitive information
                            hidden
                            from the client or third parties (JWE - RFC7516). Or it can be both signed and
                            encrypted.</p>
                        <p>JWT is mainly used in web applications. JWT can be used to authorize users to services.
                            An authenticated
                            user may receive a JWT that can be passed to downstream services to both identify that
                            user
                            and provide that user’s authorization credentials. </p>
                        <p>You can user any kind of technology in order to work with JWT: JavaScript, Node.js,
                            Java, .NET,
                            Python, Ruby, PHP, etc. It can be passed as part of URL, form body parameter, cookie or
                            HTTP
                            Header. Mainly JWT is used for single sign-on (SSO) context, for example if you have
                            multiple
                            websites and you would like to use the same token across all of them, you can have
                            authentication
                            to be made against one website and use the same token against other websites.</p>
                        <p>JWT contains three parts (all are base64 encoded), which are separated with dots: </p>

                        <ol>
                            <li>Header</li>
                            <li>Payload</li>
                            <li>Signature</li>
                        </ol>

                        <br>

                        <p>
                            <b>Header</b> is a JSON object which usually contains two parts:</p>

                        <ul>
                            <li>“typ”: JWT</li>
                            <li>“alg”: hashing algorithm (HS256, RS512, ES384, etc.) You can provide any hashing
                                algorithm
                                you like.</li>
                        </ul>

                        <br>

                        <p>Payload –contains all the necessary data which needs to be sent from the server to the
                            client
                            or vice versa. Information is JSON representation of claims (“key”:”value”). Default
                            keys
                            include the following:</p>

                        <ul>
                            <li>“iss”-issuer</li>
                            <li>“sub”-subject</li>
                            <li>“aud”-audience</li>
                            <li>“exp”-expiration time</li>
                            <li>“nbf”-not before</li>
                            <li>“iat”-issued at</li>
                            <li>“jti”- JWT id</li>
                        </ul>
                        <br>

                        <p>You are not limited to these keys and you add your own custom keys.</p>
                        <p>Remember! All information in payload is not encrypted and visible to everyone; however
                            client
                            or other third parties cannot modify any information in payload since it will
                            invalidate
                            the entire token.</p>

                        <p>
                            <b>Signature</b> is a hash of header and payload using a secret. Looks like this and
                            it’s very
                            hard to decrypt in general:</p>

                        <p style="font-style: italic;">
                            var t = base64Encode(header) + “ . ” + base64Encode(payload);
                            <br> var signature = base64Encode(t, secret);
                        </p>

                        <br>

                        <p>More info about JWT can be found here:
                            <a href="https://tools.ietf.org/html/rfc7519">IETF Trust</a>
                        </p>
                    </div>
                </div>
            </div>
            <!-- /about -->
        </div>
        <!-- /Row -->

    </div>
    <!-- /Container -->

</div>
<!-- /About -->